###############################################################################
# Generate a *.gim file from a provided *.JSON
# NOTE "gim" is short for "(g)e (i)nstall (m)anager" because I am super creative like that
#      It's nothing special, just the latest/release JSON stripped down to only what this script is interested in
#      The file format is very simple key:value pairs, delimited by newlines, no comment support
# Sample .gim entry (minus the leading "#  "):
#  name:Proton-5.9-GE-5-ST.tar.gz
#  size:406721946
#  browser_download_url:https://github.com/GloriousEggroll/proton-ge-custom/releases/download/5.9-GE-5-ST/Proton-5.9-GE-5-ST.tar.gz
#
# WARNING redirect all console messages/debug output to stderr
# TODO download and process new versions if the current gim is malformed
GenerateGimFromJSON() {

    local sFILE=${1-}

    # Requires an existing path/file as the first parameter
    [[ -f $sFILE ]] || return 1

    # If an output file already exists, back it up first
    [[ -f ${sFILE}.gim ]] && {
        mv "$sFILE".gim "$sFILE".bak || return 1
    }

    # Create/Clear the file we want to output to
    printf '' > "$sFILE".gim || return 1

    # TODO default values for consistent gim line numbers
    while IFS= read -r; do
        [[ $REPLY =~ ^.*\"name\":[[:space:]].*\.tar\.gz\",$|^.*\"size\":[[:space:]].*$|^.*\"browser_download_url\":[[:space:]].*$ ]] && {
            REPLY=${REPLY//[[:blank:]]}
            REPLY=${REPLY//\"}
            REPLY=${REPLY//,}
            if [[ -n $REPLY ]]; then
                printf '%s\n' "$REPLY" >&1
            else
                ((iDEBUG)) && echo "$LINENO GenerateGimFromJSON: parse error, REPLY is null" 1>&2
                printf '%s\n' "GenerateGimFromJSON:ERROR" >&1
            fi
        }
    done < "$sFILE" 1>> "$sFILE".gim

    return 0
}
