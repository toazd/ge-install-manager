#!/usr/bin/env bash
#shellcheck disable=SC2005
###############################################################################
###############################################################################
# Required for testing

iDEBUG=0
sGE_RELEASES_URL="https://api.github.com/repos/GloriousEggroll/proton-ge-custom/releases"
sGE_LATEST_VERSION_URL="https://api.github.com/repos/GloriousEggroll/proton-ge-custom/releases/latest"

CleanUpVersion() {

    [[ -z $1 ]] && {
        return 1
    }

    sVERSION=$1

    sVERSION=${sVERSION^^}
    sVERSION=${sVERSION#*"PROTON-"}
    sVERSION=${sVERSION%".TAR.GZ"*}

    printf "%s" "$sVERSION"

    return 0
}

###############################################################################
###############################################################################
# Old, obsolete, or removed

# Accepts a GE version, returns a URL
GetGEVersionBrowserDownloadURL() {
    [[ -z $1 ]] && {
        [[ $iDEBUG -eq 1 ]] && echo "GetGEVersionBrowserDownloadURL: empty parameter error"
        return 1
    }
    local sVERSION=''
    local iLINE_COUNTER=0
    local iBROWSER_URL_LINE=0
    local sBROWSER_URL=''
    sVERSION=$(CleanUpVersion "$1")
    [[ -z $sVERSION ]] && return 1
    # Check latest release first
    if UpdateSavedGELatestRelease; then
        while IFS= read -r; do
            iLINE_COUNTER=$((iLINE_COUNTER+1))
            if [[ $REPLY == name:*$sVERSION* ]]; then
                iBROWSER_URL_LINE=$((iLINE_COUNTER+2))
                # Skip the next line counter check
                continue
            fi
            if [[ $iLINE_COUNTER -eq $iBROWSER_URL_LINE ]]; then
                [[ $REPLY == browser_download_url:*$sVERSION* ]] && {
                    sBROWSER_URL=${REPLY/#browser_download_url:}
                    break
                }
            fi
        done < "latest.gim"
    fi
    # If that failed, then search through the releases
    if [[ -z $sBROWSER_URL ]]; then
        iLINE_COUNTER=0
        iBROWSER_URL_LINE=0
        if UpdateSavedGEReleases; then
            while IFS= read -r; do
                iLINE_COUNTER=$((iLINE_COUNTER+1))

                if [[ $REPLY == name:*$sVERSION* ]]; then
                    iBROWSER_URL_LINE=$((iLINE_COUNTER+2))
                    # Skip the next line counter check
                    continue
                fi

                if [[ $iLINE_COUNTER -eq $iBROWSER_URL_LINE ]]; then
                    [[ $REPLY == browser_download_url:*$sVERSION* ]] && {
                        sBROWSER_URL=${REPLY/#browser_download_url:}
                        break
                    }
                fi
            done < "releases.gim"
            [[ $iDEBUG -eq 1 ]] && echo "GetGEVersionBrowserDownloadURL: sBROWSER_URL sourced from releases.gim"
        fi
    else
        [[ $iDEBUG -eq 1 ]] && echo "GetGEVersionBrowserDownloadURL: sBROWSER_URL sourced from latest.gim"
    fi
    [[ -z $sBROWSER_URL ]] && {
        [[ $iDEBUG -eq 1 ]] && echo "GetGEVersionBrowserDownloadURL: sBROWSER_URL is NULL"
        return 1
    }
    printf '%s' "$sBROWSER_URL"
    return 0
}

GetLatestGEVersionInfo() {

    local sGE_LATEST_RELEASE_JSON=

    sGE_LATEST_RELEASE_JSON=$(curl -sz "$sGE_INSTALL_PATH"/latest -L "$sGE_LATEST_VERSION_URL" -o -)

    [[ $iDEBUG -eq 1 ]] && echo "GetLatestGEVersionInfo: Using URL \"$sGE_LATEST_VERSION_URL\" for latest release information"

    # if curl returned NULL (remote file not newer) fill the var with the contents of the saved file 'latest'
    if [[ -z $sGE_LATEST_RELEASE_JSON ]]; then
        [[ $iDEBUG -eq 1 ]] && echo "GetLatestGEVersionInfo: Remote file not newer, using saved ${sGE_INSTALL_PATH}/latest"
        if [[ ! -f $sGE_INSTALL_PATH/latest ]]; then
            printf "%s\n%sn" "Server return NULL and no saved release information found in $sGE_INSTALL_PATH" "Is $sGE_LATEST_VERSION_URL valid?"
            return 1
        else
            sGE_LATEST_RELEASE_JSON=$(cat "$sGE_INSTALL_PATH"/latest 2>/dev/null)
        fi
    elif [[ -n $sGE_LATEST_RELEASE_JSON ]]; then
        # TODO if new version is received, show release info from json file?
        [[ $iDEBUG -eq 1 ]] && echo "GetLatestGEVersionInfo: Saving latest release information to ${sGE_INSTALL_PATH}/latest"
        printf "%s" "$sGE_LATEST_RELEASE_JSON" > "$sGE_INSTALL_PATH"/latest
    fi

    # TODO check hash and/or length / might need a config file
    [[ -z $sGE_LATEST_RELEASE_JSON ]] && {
        printf "%s\n%s\n" "Local saved release information NULL or corrupt" "Release information not available"
        return 1
    }

    # Get the latest release from the json
    sGE_LATEST_VERSION=${sGE_LATEST_RELEASE_JSON#*"\"tag_name\": \""}
    sGE_LATEST_VERSION=${sGE_LATEST_VERSION%%"\","*}

    return 0
}

###############################################################################
###############################################################################








