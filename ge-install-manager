#!/usr/bin/env bash
#shellcheck disable=SC2155
# https://github.com/koalaman/shellcheck/wiki/SC2155

###############################################################################
#                                                                             #
#      Toazd 2020 Unlicense https://unlicense.org/                            #
#                                                                             #
#      GloriousEggroll installation manager                                   #
#       Manage proton-ge-custom installations                                 #
#        https://github.com/GloriousEggroll/proton-ge-custom                  #
#                                                                             #
###############################################################################

set +e # WARNING DO NOT set -e

sSCRIPT_VERSION="0.7.0"
sSCRIPT_CODENAME="Cochrane Bonaventure"
sGE_INSTALL_PATH="$HOME"/.steam/root/compatibilitytools.d
sSTEAM_PID="$HOME"/.steam/steam.pid
sGE_DOWNLOAD_BASE_URL="https://github.com/GloriousEggroll/proton-ge-custom/releases/download"
sGE_LATEST_VERSION_URL="https://api.github.com/repos/GloriousEggroll/proton-ge-custom/releases/latest"
sGE_RELEASES_URL="https://api.github.com/repos/GloriousEggroll/proton-ge-custom/releases"
sGE_LATEST_VERSION=''
iFORCE=0
iDEBUG=0
iDOWNLOAD=0
iINSTALL=0
iREMOVE=0
iUPDATE=0
iFINAL_CLEANUP=0
iREMOVE_INSTALL_PATH=0
iREMOVE_SAVED_PACKAGES=0
iLIST_INSTALLED_GE_VERSIONS=0
iREPORT_USAGE=0
iSHOW_HELP=0
iSHOW_USAGE=0
OPTERR=1 # make sure it's on

###############################################################################

ShowHelp() {
    cat <<END_OF_HELP

    $(basename "$0" .sh)  v$sSCRIPT_VERSION \"$sSCRIPT_CODENAME\"

    Required:       curl, tar, gzip, pgrep, stat
    Optional:       du, find, wc (for -s|-S)

    Install path:          $sGE_INSTALL_PATH
    Base download URL:     $sGE_DOWNLOAD_BASE_URL
    Latest version URL:    $sGE_LATEST_VERSION_URL

    -h            - Show this help
    -H            - Show usage notes, formats, and examples
    -l            - List installed versions and saved packages
    -S            - Report file count and disk usage of install path
    -s <version>  - Report file count and disk usage of <version>
    -u            - Check for and install the latest release if it is not installed
    -i <version>  - Download and install <version>
    -R <version>  - Remove installed <version>
    -r <version>  - Remove saved package <version>
    -d <version>  - Download the package for <version> and save it to the install path
    -N            - Remove all saved packages matching the pattern "Proton-*.tar.gz" in the install path
    -X            - Remove the entire install path
                      -f is also required to confirm that you are sure
    -f            - Force install, upgrade, or remove
                      Combined with -u and/or -i, remove saved package and download a new copy
    -z            - Enable debug mode
                      Enable extra output messages and preserve any temporary files created

END_OF_HELP

    return 0
}

###############################################################################

ShowUsage() {
    cat <<END_OF_USAGE

Usage:

  - Acceptable formats for <version>:
      5.9-GE-3-ST, Proton-5.9-GE-3-ST, Proton-5.9-GE-3-ST.tar.gz (case-insensitive)

  - Parameters that do not require arguments can be combined
      For example: ./$(basename "$0") -hH
                     Result: Show help and then show usage
                   ./$(basename "$0") -lSu -i 5.9-GE-3-ST
                     Result: Check for the latest version and install it,
                       install version 5.9-GE-3-ST, list installed versions, then
                       report file and disk usage for the install path

  - The order of parameters is not significant except,
    > If during invocation multiple identical parameters are supplied.
          For example: -s 5.11-GE-1-MF -s 5.9-GE-3-ST
        Only the right-most parameter will be processed (-s 5.9-GE-3-ST).
    > If during invocation a parameter and it's capital/lowercase counter-part
      are both included (except -hH)
          For example: -s 5.11-GE-1-MF -S
        Only the right-most parameter will be processed (-S).

  - Most unique, lower-case parameters (except -hH) can be combined with other
    unique, lower-case options perform more than one action in one invocation.
      For example: Assume the latest version is 5.9-GE-3-ST,
        ./$(basename "$0") -f -X -i Proton-5.11-GE-1-MF -z -u
      will enable debug mode, remove the installation path,
      update to the latest version 5.9-GE-3-ST, and then install version 5.11-GE-1-MF.

  - Order of operations if multiple parameters are supplied
      NOTE: -h, -hH|-Hh, -H, and -fzZ will exit irrespective of other parameters
      Force toggle, Report environment info, Show help, Show usage,
      Debug toggle, Remove install path,
      Remove saved packages (if remove install path is not active),
      Remove installed version (if remove install path is not active),
      Download, Update, Install, List installed, Report usage

END_OF_USAGE

    return 0
}

###############################################################################
#TODO consider merging UpdateSavedGEReleases and UpdateSavedGELatestRelease
UpdateSavedGELatestRelease() {

    local sGE_LATEST_RELEASE_JSON=''

    if [[ -f $sGE_INSTALL_PATH/latest.gim ]]; then
        [[ $iDEBUG -eq 1 ]] && echo "UpdateSavedGELatestRelease: checking if \"$sGE_LATEST_VERSION_URL\" is newer than $sGE_INSTALL_PATH/latest.gim"
        sGE_LATEST_RELEASE_JSON=$(curl -sz "$sGE_INSTALL_PATH"/latest.gim -L "$sGE_LATEST_VERSION_URL" -o - 2>/dev/null)
    else
        [[ $iDEBUG -eq 1 ]] && echo "UpdateSavedGELatestRelease: checking if \"$sGE_LATEST_VERSION_URL\" is newer than $sGE_INSTALL_PATH/latest.json"
        sGE_LATEST_RELEASE_JSON=$(curl -sz "$sGE_INSTALL_PATH"/latest.json -L "$sGE_LATEST_VERSION_URL" -o - 2>/dev/null)
    fi

    if [[ -z $sGE_LATEST_RELEASE_JSON ]]; then
        [[ $iDEBUG -eq 1 ]] && echo "UpdateSavedGELatestRelease: curl returned NULL"
        if [[ ! -f $sGE_INSTALL_PATH/latest.json ]]; then
            echo "UpdateSavedGELatestRelease: No new release found and $sGE_INSTALL_PATH/latest.json not found. Is \"$sGE_LATEST_VERSION_URL\" a valid URL?" 1>&2
            return 1
        fi
    elif [[ -n $sGE_LATEST_RELEASE_JSON ]]; then
        [[ $iDEBUG -eq 1 ]] && echo "UpdateSavedGELatestRelease: curl response was not empty"
        [[ -f $sGE_INSTALL_PATH/latest.json ]] && mv "$sGE_INSTALL_PATH"/latest.json "$sGE_INSTALL_PATH"/latest.json.bak
        printf '%s' "$sGE_LATEST_RELEASE_JSON" > "$sGE_INSTALL_PATH"/latest.json
        GenerateGimFromJSON "$sGE_INSTALL_PATH/latest.json"
    fi

    return 0
}

###############################################################################
#TODO consider merging UpdateSavedGEReleases and UpdateSavedGELatestRelease
UpdateSavedGEReleases() {

    local sGE_RELEASES_JSON=''

    # BUG updates to download_count in remote releases cause curl -z to download a new version much more often than is needed
    # TODO fix it. may need to construct "custom" GET requests, or you know, actually use the api
    if [[ -f $sGE_INSTALL_PATH/latest.gim ]]; then
        [[ $iDEBUG -eq 1 ]] && echo "UpdateSavedGEReleases: checking if \"$sGE_RELEASES_URL\" is newer than $sGE_INSTALL_PATH/releases.gim"
        sGE_RELEASES_JSON=$(curl -sz "$sGE_INSTALL_PATH"/releases.gim -L "$sGE_RELEASES_URL" -o - 2>/dev/null)
    else
        [[ $iDEBUG -eq 1 ]] && echo "UpdateSavedGEReleases: checking if \"$sGE_RELEASES_URL\" is newer than $sGE_INSTALL_PATH/releases.json"
        sGE_RELEASES_JSON=$(curl -sz "$sGE_INSTALL_PATH"/releases.json -L "$sGE_RELEASES_URL" -o - 2>/dev/null)
    fi

    if [[ -z $sGE_RELEASES_JSON ]]; then
        [[ $iDEBUG -eq 1 ]] && echo "UpdateSavedGEReleases: curl returned NULL"
        if [[ ! -f $sGE_INSTALL_PATH/releases.json ]]; then
            echo "No new release and releases.json not found. Is \"$sGE_RELEASES_URL\" a valid URL?"
            return 1
         fi
    elif [[ -n $sGE_RELEASES_JSON ]]; then
        [[ $iDEBUG -eq 1 ]] && echo "UpdateSavedGEReleases: curl response was not empty"
        [[ -f $sGE_INSTALL_PATH/releases.json ]] && mv "$sGE_INSTALL_PATH"/releases.json "$sGE_INSTALL_PATH"/releases.json.bak
        printf '%s' "$sGE_RELEASES_JSON" > "$sGE_INSTALL_PATH"/releases.json
        GenerateGimFromJSON "$sGE_INSTALL_PATH/releases.json"
    fi

    return 0
}

###############################################################################
# NOTE "gim" is short for "(g)e (i)nstall (m)anager" because I am super creative like that
# WARNING redirect all console messages/debug output to stderr
# NOTE the first "extension" of the input file will get replaced (ie. "test.releases.json" => "test.releases.bak"/"test.releases.gim")
#      if a dot is not present, the extension .bak will be added
GenerateGimFromJSON() {

    # Requires an existing path/file as the first parameter
    [[ -f $1 ]] || return 1

    # If an output file already exists, back it up first
    [[ -f ${1%.*}.gim ]] && {
        mv "${1%.*}".gim "${1%.*}".bak || return 1
    }

    # Create/Clear the file we want to output to
    printf '' > "${1%.*}".gim || return 1

    # TODO default values for consistent gim line numbers
    while IFS= read -r; do
        [[ $REPLY =~ ^.*\"name\":[[:space:]].*\.tar\.gz\",$|^.*\"size\":[[:space:]].*$|^.*\"browser_download_url\":[[:space:]].*$ ]] && {
            REPLY=${REPLY//[[:blank:]]}
            REPLY=${REPLY//\"}
            REPLY=${REPLY//,}
            if [[ -n $REPLY ]]; then
                printf '%s\n' "$REPLY" >&1
            else
                [[ $iDEBUG -eq 1 ]] && echo "GenerateGimFromJSON: parse error, REPLY is null" 1>&2
                printf '%s\n' "GenerateGimFromJSON:ERROR" >&1
            fi
        }
    done < "$1" 1>> "${1%.*}".gim

    return 0
}

###############################################################################
# Sets the global variable sGE_LATEST_VERSION to the latest version
# TODO *might* want to check releases if latest fails. Or, just let it burn. Don't forget the marshmallows!
GetLatestGEVersion() {

    # WARNING DO NOT make this local (this warning not brought to you by personal experience)
    sGE_LATEST_VERSION=''

    if UpdateSavedGELatestRelease; then
        while IFS= read -r; do
            [[ $REPLY =~ ^name:.*\.tar\.gz$ ]] && {
                [[ $iDEBUG -eq 1 ]] && echo "GetLatestGEVersion: matched line \"$REPLY\""
                sGE_LATEST_VERSION=${REPLY#*:}
                sGE_LATEST_VERSION=${sGE_LATEST_VERSION/%.tar.gz}
                [[ $iDEBUG -eq 1 ]] && echo "GetLatestGEVersion: sGE_LATEST_VERSION set to \"$REPLY\""
                break
            }
        done < "$sGE_INSTALL_PATH"/latest.gim

        [[ -z $sGE_LATEST_VERSION ]] && {
            echo "GetLatestGEVersion: interal error retrieving sGE_LATEST_VERSION for version \"$sGE_LATEST_VERSION\""
            return 1
        }
    else
        [[ $iDEBUG -eq 1 ]] && echo "GetLatestGEVersion: UpdateSavedGELatestRelease returned failure status"
        return 1
    fi

    return 0
}

###############################################################################
# Accepts a version and an attribute name, returns the value of the requested attribute
# if found, looking first in latest.gim and then releases.gim
# eg. QueryGimAttribute "Proton-5.9-GE-1-MF.tar.gz" "browser_download_url"
# BUG both attributes are set even though only one can be queried at a time
# WARNING Do not output to stderr inside either while loop unless you enjoy long walks in void and conversations with /dev/null
QueryGimAttribute() {

    if [[ -z $1 || -z $2 ]] || [[ ! $# -eq 2 ]]; then
        [[ $iDEBUG -eq 1 ]] && echo "QueryGimAttribute: parameter error"
        return 1
    fi

    [[ ${2,,} != @(size|browser_download_url) ]] && {
        [[ $iDEBUG -eq 1 ]] && echo "QueryGimAttribute: unsupported attribute requested \"$2\""
        return 1
    }

    local sVERSION=''
    local iLINE_COUNTER=0
    local iSIZE_LINE=0
    local iBROWSER_URL_LINE=0
    local sSIZE=''
    local sBROWSER_URL=''
    local sATTRIBUTE=''

    sVERSION=$(CleanUpVersion "$1")
    [[ -z $sVERSION ]] && return 1

    sATTRIBUTE=${2,,}

    # first, check latest.gim
    if UpdateSavedGELatestRelease; then
        while IFS= read -r; do
            iLINE_COUNTER=$((iLINE_COUNTER+1))
            [[ $REPLY == name:*$sVERSION* ]] && { iSIZE_LINE=$((iLINE_COUNTER+1)); iBROWSER_URL_LINE=$((iLINE_COUNTER+2)); continue; } # version match
            if [[ $iLINE_COUNTER -eq $iSIZE_LINE ]]; then # size
                [[ $REPLY =~ ^size:[[:digit:]]*$ ]] && { sSIZE=${REPLY/#size:}; continue; }
            fi
            if [[ $iLINE_COUNTER -eq $iBROWSER_URL_LINE ]]; then # browser_download_url
                [[ $REPLY == browser_download_url:*$sVERSION* ]] && { sBROWSER_URL=${REPLY/#browser_download_url:}; break; }
            fi
        done < "$sGE_INSTALL_PATH"/latest.gim 2>/dev/null
    else
        [[ $iDEBUG -eq 1 ]] && echo "QueryGimAttribute: UpdateSavedGELatestRelease failed"
    fi

    # try again using releases.gim
    if [[ -z $sSIZE || -z $sBROWSER_URL ]]; then
        if UpdateSavedGEReleases; then
            while IFS= read -r; do
                iLINE_COUNTER=$((iLINE_COUNTER+1))
                [[ $REPLY == name:*$sVERSION* ]] && { iSIZE_LINE=$((iLINE_COUNTER+1)); iBROWSER_URL_LINE=$((iLINE_COUNTER+2)); continue; } # version match
                if [[ $iLINE_COUNTER -eq $iSIZE_LINE ]]; then # size
                    [[ $REPLY =~ ^size:[[:digit:]]*$ ]] && { sSIZE=${REPLY/#size:}; continue; }
                fi
                if [[ $iLINE_COUNTER -eq $iBROWSER_URL_LINE ]]; then # browser_download_url
                    [[ $REPLY == browser_download_url:*$sVERSION* ]] && { sBROWSER_URL=${REPLY/#browser_download_url:}; break; }
                fi
            done < "$sGE_INSTALL_PATH/"releases.gim 2>/dev/null
        else
            [[ $iDEBUG -eq 1 ]] && echo "QueryGimAttribute: UpdateSavedGEReleases failed"
        fi
    fi

    # if either not found, error
    [[ -z $sSIZE || -z $sBROWSER_URL ]] && {
        [[ $iDEBUG -eq 1 ]] && echo "GetGEVersionBrowserDownloadURL: .gim parse error sSIZE: \"$sSIZE\" sBROWSER_URL: \"$sBROWSER_URL\""
        return 1
    }

    # output the value of the requested attribute
    case $sATTRIBUTE in
        size) printf '%s' "$sSIZE" ;;
        browser_download_url) printf '%s' "$sBROWSER_URL" ;;
        *) printf ''; return 1
    esac

    return 0
}

###############################################################################
# Attempt to download a package "Proton*.tar.gz" using a tmp path. The version
# is specified by setting sDOWNLOAD_VERSION before calling this function.
DownloadGEPackage() {

    local sTMP_DIR=$(mktemp -qd --tmpdir "$(basename "$0" .sh)".tmp.XXXXXXXXXX)
    local sTMP_PACKAGE=$sTMP_DIR/Proton-${sDOWNLOAD_VERSION}.tar.gz
    local sGE_DOWNLOAD_URL=$(QueryGimAttribute "$sDOWNLOAD_VERSION" "browser_download_url")
    local sSIZE_BYTES=''

    echo "Downloading \"$sGE_DOWNLOAD_URL\""
    if curl -# -L "$sGE_DOWNLOAD_URL" -o "$sTMP_PACKAGE"; then
        sSIZE_BYTES=$(stat -c "%s" "$sTMP_PACKAGE")
        [[ $iDEBUG -eq 1 ]] && echo "DownloadGEPackage: Package size in bytes: $sSIZE_BYTES"
        if [[ $sSIZE_BYTES -eq 9 ]] && [[ $(cat "$sTMP_PACKAGE" 2>/dev/null) = "Not Found" ]]; then
            echo "DownloadGEPackage: package for version \"$sDOWNLOAD_VERSION\" not found"
            CleanUp
            return 1
        # TODO attempt download again automagically? how to tell if it's transient or not?
        elif [[ $sSIZE_BYTES != "$(QueryGimAttribute "$sDOWNLOAD_VERSION" "size")" ]]; then
            printf '%s\n%s\n' \
                   "DownloadGEPackage: download size and expected size do not match" \
                   "DownloadGEPackage: (\"$sSIZE_BYTES\" != \"$(QueryGimAttribute "$sDOWNLOAD_VERSION" "size")\")"
           CleanUp
           return 1
        fi
        [[ $iDEBUG -eq 1 ]] && echo "DownloadGEPackage: Copying package \"$sTMP_PACKAGE\" to \"$sGE_INSTALL_PATH\""
        if cp "$sTMP_PACKAGE" "$sGE_INSTALL_PATH"; then
            [[ $iDEBUG -eq 1 ]] && echo "DownloadGEPackage: Package copied successfully"
            echo "Download succeeded"
            CleanUp
        else
            [[ $iDEBUG -eq 1 ]] && echo "DownloadGEPackage: Copy package \"$sTMP_PACKAGE\" to \"$sGE_INSTALL_PATH\" failed"
            echo "Download failed"
            CleanUp
            return 1
        fi
    else
        echo "Download failed"
        CleanUp
        return 1
    fi

    return 0
}

###############################################################################
# TODO Comments briefly describing the function go here
InstallGEVersion() {

    local sVERSION=''

    if [[ $iUPDATE -eq 1 ]]; then
        sVERSION=$sGE_LATEST_VERSION
    elif [[ $iUPDATE -eq 0 ]]; then
        sVERSION=$sINSTALL_VERSION
    fi

    if IsInstalled "$sVERSION"; then
        if [[ $iFORCE -eq 0 ]]; then
            echo "Install: $sVERSION already installed"
            return 0
        elif [[ $iFORCE -eq 1 ]]; then
            if IsSteamRunning; then
                echo "Please close Steam before re-installing a version that is already installed"
                return 1
            else
                echo "Install: Forcing re-install of version $sVERSION"
            fi
        fi
    fi

    # if a saved package exists and -f is not included
    if [[ -f $sGE_INSTALL_PATH/Proton-${sVERSION}.tar.gz ]] && [[ $iFORCE -eq 0 ]]; then
        echo "Using saved package: $sGE_INSTALL_PATH/Proton-${sVERSION}.tar.gz"
        sEXTRACT_PACKAGE_VERSION=$sVERSION
        if ExtractGEPackage; then
            return 0
        else
            return 1
        fi
    # if a saved package exists and -f is included
    # NOTE doesn't matter if Steam is running
    elif [[ -f $sGE_INSTALL_PATH/Proton-${sVERSION}.tar.gz ]] && [[ $iFORCE -eq 1 ]]; then
        echo "Removing saved package $sGE_INSTALL_PATH/Proton-${sVERSION}.tar.gz"
        if rm "$sGE_INSTALL_PATH/Proton-${sVERSION}.tar.gz"; then
            echo "Package $sGE_INSTALL_PATH/Proton-${sVERSION}.tar.gz removed"
        else
            echo "Removing package $sGE_INSTALL_PATH/Proton-${sVERSION}.tar.gz failed"
            return 1
        fi
    fi

    # If a saved package for this version doesn't exist or it was removed, download it and install it
    sDOWNLOAD_VERSION=$sVERSION
    if DownloadGEPackage; then
        sEXTRACT_PACKAGE_VERSION=$sVERSION
        if ExtractGEPackage; then
            return 0
        else
            return 1
        fi
    else
        return 1
    fi

    return 0
}

###############################################################################
# TODO Remove a version specified in sREMOVE_VERSION before calling
RemoveGEVersion() {

    local sREMOVE_PATH=$sGE_INSTALL_PATH/Proton-${sREMOVE_VERSION}
    local iFAILED=0

    # remove installed path
    if [[ -z $sREMOVE_PACKAGE ]]; then
        if [[ -d $sREMOVE_PATH ]]; then
            [[ $iDEBUG -eq 1 ]] && echo "RemoveGEVersion: Removing $sREMOVE_PATH"
            if IsSteamRunning && IsInstalled "$sREMOVE_VERSION"; then
                # TODO is there a way to tell which version(s) Steam is using?
                echo "Please close Steam before removing a version"
            elif IsInstalled "$sREMOVE_VERSION"; then
                if rm -rf "$sREMOVE_PATH"; then
                    echo "Removed version $sREMOVE_VERSION"
                else
                    echo "Removal of \"$sREMOVE_PATH\" failed"
                    iFAILED=1
                fi
            else
                [[ $iDEBUG -eq 1 ]] && {
                    printf '%s\n%s\n' \
                           "RemoveGEVersion: package and path exist but IsInstalled failed (at line: $LINENO)" \
                           "sREMOVE_PACKAGE:\"$sREMOVE_PACKAGE\" sREMOVE_PATH\"$sREMOVE_PATH\" sREMOVE_VERSION\"$sREMOVE_VERSION\""
                }
                return 1
            fi
        else
            echo "Version not found at: \"$sREMOVE_PATH\""
            iFAILED=1
        fi
    # remove saved package
    # NOTE doesn't matter if Steam is installed
    elif [[ -n $sREMOVE_PACKAGE ]]; then
        if [[ -f $sGE_INSTALL_PATH/Proton-${sREMOVE_VERSION}.tar.gz ]]; then
            if rm -f "$sGE_INSTALL_PATH/Proton-${sREMOVE_VERSION}.tar.gz"; then
                echo "Package $sGE_INSTALL_PATH/Proton-${sREMOVE_VERSION}.tar.gz removed"
            else
                echo "Failed to remove package $sGE_INSTALL_PATH/Proton-${sREMOVE_VERSION}.tar.gz"
                iFAILED=1
            fi
        fi
    fi

    if [[ $iFAILED -eq 1 ]]; then
        return 1
    elif [[ $iFAILED -eq 0 ]]; then
        return 0
    else
        [[ $iDEBUG -eq 1 ]] && "RemoveGEVersion: iFAILED was neither 1 or 0: \"$iFAILED\""
        return 1
    fi
}

###############################################################################

ExtractGEPackage() {

    printf "%s" "Extracting"
    if tar --checkpoint=.1000 -C "$sGE_INSTALL_PATH" -xzf "$sGE_INSTALL_PATH/Proton-${sEXTRACT_PACKAGE_VERSION}.tar.gz" 2>/dev/null; then
        printf "\n%s\n" "Package extraction successful"
        return 0
    else
        printf "\n%s\n" "Package extraction failed"
        [[ -d $sGE_INSTALL_PATH/Proton-${sEXTRACT_PACKAGE_VERSION} ]] && {
            [[ $iDEBUG -eq 1 ]] && echo "ExtractGEPackage: Removing failed extraction path \"$sGE_INSTALL_PATH/Proton-${sEXTRACT_PACKAGE_VERSION}\""
            if rm -rf "$sGE_INSTALL_PATH/Proton-${sEXTRACT_PACKAGE_VERSION}"; then
                [[ $iDEBUG -eq 1 ]] && echo "ExtractGEPackage: Removal succeeded"
            else
                echo "Failed to remove path of failed extraction: $sGE_INSTALL_PATH/Proton-${sEXTRACT_PACKAGE_VERSION}"
                # TODO update/remove message if install verification is updated
                echo "This script may interpret it as a valid install until it is removed"
            fi
        }
        return 1
    fi

    return 0
}

###############################################################################

# TODO better verification
ListInstalledGEVersions() {

    local iCOUNT=0
    local sNODE=''
    local sEXTRACTED_VERSION=''

    [[ $iDEBUG -eq 1 ]] && echo "ListInstalledGEVersions: Install path: \"$sGE_INSTALL_PATH\""

    echo "Installed version(s):"
    for sNODE in "$sGE_INSTALL_PATH"/*; do
        if [[ -d $sNODE ]]; then
            sEXTRACTED_VERSION=$(cat "$sNODE"/version 2>/dev/null)
            sEXTRACTED_VERSION=${sEXTRACTED_VERSION#*[[:blank:]]}
            if [[ -z $sEXTRACTED_VERSION ]] || [[ $sEXTRACTED_VERSION = "file not found" ]]; then sEXTRACTED_VERSION="error: version file not found"; fi
            echo "  ${sNODE##*/} ($sEXTRACTED_VERSION)"
            iCOUNT=$((iCOUNT+1))
        fi
    done
    [[ $iCOUNT -eq 0 ]] && echo "None found"

    echo "Saved packages:"
    sNODE=''
    iCOUNT=0
    for sNODE in "$sGE_INSTALL_PATH"/Proton-*.tar.gz; do
        if [[ -f $sNODE ]]; then
            if [[ $iDEBUG -eq 1 ]]; then
                echo "ListInstalledGEVersions: $sNODE"
            else
                echo "  ${sNODE##*/}"
            fi
            iCOUNT=$((iCOUNT+1))
        fi
    done
    [[ $iCOUNT -eq 0 ]] && echo "None found"

    return 0
}

###############################################################################

ReportGEDiskUsage() {

    local sPATH=''
    local iFAILED=0

    # check for commands required by this optional feature and report any missing
    # NOTE Arch - coreutils: du, wc - required by base: find
    # TODO are there any platforms that can run Steam that don't have du, find, and wc?
    if ! command -v du >/dev/null; then
        iFAILED=1
        echo "command du not found"
    else
        [[ $iDEBUG -eq 1 ]] && echo "ReportGEDiskUsage: command du found"
    fi

    if ! command -v find >/dev/null; then
        iFAILED=1
        echo "command find not found"
    else
        [[ $iDEBUG -eq 1 ]] && echo "ReportGEDiskUsage: command find found"
    fi

    if ! command -v wc >/dev/null; then
        iFAILED=1
        echo "command wc not found"
    else
        [[ $iDEBUG -eq 1 ]] && echo "ReportGEDiskUsage: command wc found"
    fi

    # if all checks succeeded
    if [[ $iFAILED -eq 0 ]]; then
        # set the path to be reported on based on which parameter was used -s|-S
        # NOTE if -S is invoked, sREPORT_VERSION is set to NULL in getopts
        if [[ $sREPORT_VERSION = '' ]]; then
            sPATH=$sGE_INSTALL_PATH
        elif [[ -n $sREPORT_VERSION ]]; then
            sPATH=$sGE_INSTALL_PATH/Proton-${sREPORT_VERSION}
        fi

        if [[ -d $sPATH ]]; then
            sSIZE=$(du -sh "$sPATH")
            sFILE_COUNT=$(find "$sPATH" -type f | wc -l)
            printf "%s\n%s\n%s\n" "Path: $sPATH" "Files: $sFILE_COUNT" "Disk usage: ${sSIZE%%[[:blank:]]*}"
        else
            [[ $iDEBUG -eq 1 ]] && echo "Path: $sPATH"
            echo "Version \"$sREPORT_VERSION\" not found"
            return 1
        fi
    # if any check failed
    elif [[ $iFAILED -eq 1 ]]; then
        [[ $iDEBUG -eq 1 ]] && echo "ReportGEDiskUsage: At least one optional command was not found"
        echo "Report not available"
        return 1
    fi

    return 0
}

###############################################################################

RemoveSavedPackages() {

    local iSUCCESS=0
    local iFAILED=0

    [[ $iDEBUG -eq 1 ]] && echo "RemoveSavedPackages: Install path: \"$sGE_INSTALL_PATH\""

    for sPACKAGE in "$sGE_INSTALL_PATH"/Proton-*.tar.gz; do
        if [[ -f $sPACKAGE ]]; then
            if rm -f "$sPACKAGE"; then
                [[ $iDEBUG -eq 1 ]] && echo "RemoveSavedPackages: Package \"$sPACKAGE\" removed"
                iSUCCESS=$((iSUCCESS+1))
            else
                echo "Remove $sPACKAGE failed"
                iFAILED=$((iFAILED+1))
            fi
        fi
    done

    if [[ $iSUCCESS -eq 0 ]]; then
        echo "0 packages removed"
    elif [[ $iSUCCESS -gt 0 ]]; then
        echo "$iSUCCESS packages removed"
    fi

    [[ $iFAILED -gt 0 ]] && {
        echo "Failed to remove $iFAILED package(s)"
        return 1
    }

    return 0
}

###############################################################################

RemoveGEInstallPath() {

    local sSIZE=''

    if command -v du >/dev/null; then
        sSIZE=$(du -sh "$sGE_INSTALL_PATH")
    else
        [[ $iDEBUG -eq 1 ]] && echo "RemoveGEInstallPath: command du not found"
        sSIZE="?"
    fi

    if rm -rf "$sGE_INSTALL_PATH"; then
        echo "Remove install path succeeded ( ${sSIZE%%[[:blank:]]*} removed )"
        if [[ $iDEBUG -eq 1 ]]; then
            mkdir -pv "$sGE_INSTALL_PATH"
        else
            mkdir -p "$sGE_INSTALL_PATH"
        fi
    else
        echo "Removal of install path \"$sGE_INSTALL_PATH\" failed"
        return 1
    fi

    return 0
}

###############################################################################

IsInstalled() {

    [[ -z $1 ]] && {
        [[ $iDEBUG -eq 1 ]] && echo "IsInstalled: NULL parameter error"
        return 1
    }

    sVERSION=$(CleanUpVersion "$1")

    [[ $iDEBUG -eq 1 ]] && echo "IsInstalled: Checking for version \"$sVERSION\" at \"$sGE_INSTALL_PATH/Proton-${sVERSION}\""

    if [[ -d $sGE_INSTALL_PATH/Proton-${sVERSION} ]]; then
        return 0
    else
        return 1
    fi

    # NOTE do not return 0 here
}

###############################################################################

IsSteamRunning() {

    # TODO support an additional method that doesn't rely on steam.pid or pgrep
    if command -v pgrep >/dev/null; then
        if [[ -n $(pgrep -F "$sSTEAM_PID") ]]; then
            return 0
        else
            return 1
        fi
    else
        printf "%s\n%s\n" "Warning: command pgrep not found" "IsSteamRunning check will always return success/\"not running\" unless this command is installed"
        return 0
    fi

    # NOTE do not return 0 here
}

###############################################################################

CleanUpVersion() {

    local iLENGTH=0

    iREAL_EXIT_STATUS=$?

    [[ -z $1 ]] && {
        [[ $iDEBUG -eq 1 ]] && echo "CleanUpVersion: empty parameter error" 1>/dev/stderr
        return 1
    }

    sVERSION=$1

    [[ $iDEBUG -eq 1 ]] && {
        iLENGTH=${#sVERSION}
        echo "CleanUpVersion: sVERSION before: \"$sVERSION\"" 1>/dev/stderr
    }

    sVERSION=${sVERSION^^}
    sVERSION=${sVERSION#*'PROTON-'}
    sVERSION=${sVERSION%'.TAR.GZ'*}

    [[ $iDEBUG -eq 1 ]] && {
        echo "CleanUpVersion: sVERSION after: \"$sVERSION\"" 1>/dev/stderr
        echo "CleanUpVersion: removed $(( iLENGTH - ${#sVERSION} )) characters" 1>/dev/stderr
    }

    printf '%s' "$sVERSION"

    return 0
}

###############################################################################

ReportEnvironmentInfo() {

    # TODO report found/not found status of all commands used

    printf '\n%s\n' "#### set ####"
    if ! set; then echo "set failed"; fi

    printf '\n%s\n' "#### stty -a ####"
    if ! stty -a; then echo "stty failed"; fi

    printf '\n%s\n' "#### env -v --list-signal-handling 2>/dev/stdout ####"
    if ! env -v --list-signal-handling 2>/dev/stdout; then echo "env failed"; fi

    exit 0
}

###############################################################################

CleanUp() {

    [[ -d $sTMP_DIR ]] && {
        if [[ $iDEBUG = 0 ]]; then
            if ! rm -rf "$sTMP_DIR"; then
                echo "CleanUp: Failed to remove temporary path at $sTMP_DIR"
                return 1
            fi
        else
            [[ $iFINAL_CLEANUP -eq 1 ]] && echo "CleanUp: Temporary path saved at: $sTMP_DIR"
        fi
    }

    return 0
}

###############################################################################

ParseParameters() {
    while getopts 'zZhHflSs:i:d:R:r:NuX' sOPT; do
        case "$sOPT" in
            ("h") iSHOW_HELP=1 ;;
            ("H") iSHOW_USAGE=1 ;;
            ("f") iFORCE=1 ;;
            ("z") iDEBUG=1 ;;
            ("Z") if [[ $iFORCE -eq 1 ]] && [[ $iDEBUG -eq 1 ]]; then ReportEnvironmentInfo; fi ;; # -fzZ (undocumented environment analysis tool)
            ("X") iREMOVE_INSTALL_PATH=1 ;;
            ("N") iREMOVE_SAVED_PACKAGES=1 ;;
            ("r") iREMOVE=1 sREMOVE_VERSION=$OPTARG sREMOVE_PACKAGE="";;
            ("R") iREMOVE=1 sREMOVE_PACKAGE=${OPTARG:-""} sREMOVE_VERSION="" ;;
            ("l") iLIST_INSTALLED_GE_VERSIONS=1 ;;
            ("s") iREPORT_USAGE=1 sREPORT_VERSION=${OPTARG:-""} ;;
            ("S") iREPORT_USAGE=1 sREPORT_VERSION="" ;;
            ("d") iDOWNLOAD=1 sDOWNLOAD_VERSION=$OPTARG ;;
            ("i") iINSTALL=1 sINSTALL_VERSION=$OPTARG ;;
            ("u") iUPDATE=1 ;;
            (":"|"?") exit 1
        esac
    done
}

###############################################################################

Main() {

    # Nothing to see here, move along
    if ! ParseParameters "$@"; then exit 1; else set +e; fi

    # show help and/or usage
    if [[ $iSHOW_HELP -eq 1 ]] && [[ $iSHOW_USAGE -eq 0 ]]; then
        ShowHelp
        exit
    elif [[ $iSHOW_HELP -eq 1 ]] && [[ $iSHOW_USAGE -eq 1 ]]; then
        ShowHelp
        ShowUsage
        exit
    elif [[ $iSHOW_HELP -eq 0 ]] && [[ $iSHOW_USAGE -eq 1 ]]; then
        ShowUsage
        exit
    fi

    # debug mode
    if [[ $iDEBUG -eq 1 ]]; then
        echo "Main: Debug mode enabled"
    fi

    if [[ $iDEBUG -eq 1 ]]; then
        mkdir -pv "$sGE_INSTALL_PATH"
    else
        mkdir -p "$sGE_INSTALL_PATH"
    fi

    # remove install path
    if [[ $iREMOVE_INSTALL_PATH -eq 1 ]] && [[ $iFORCE -eq 1 ]]; then
        if IsSteamRunning; then
            echo "Please close Steam before removing the install path"
        else
            RemoveGEInstallPath
        fi
    elif [[ $iREMOVE_INSTALL_PATH -eq 1 ]] && [[ $iFORCE -eq 0 ]]; then
        echo "-X must be combined with -f to confirm that you are sure"
    fi

    # remove saved packages
    if [[ $iREMOVE_SAVED_PACKAGES -eq 1 ]] && [[ $iREMOVE_INSTALL_PATH -eq 0 ]]; then
        # TODO -f required?
        RemoveSavedPackages
    fi

    # remove an installed version or package
    if [[ $iREMOVE -eq 1 ]] && [[ $iREMOVE_INSTALL_PATH -eq 0 ]] && [[ $iREMOVE_SAVED_PACKAGES -eq 0 ]]; then
        # NOTE sREMOVE_VERSION and sREMOVE_PACKAGE are both set in getops
        sREMOVE_VERSION=$(CleanUpVersion "$sREMOVE_VERSION")
        RemoveGEVersion
    elif [[ $iREMOVE -eq 1 ]] && [[ $iREMOVE_INSTALL_PATH -eq 1 ]]; then
        echo "Skipping remove version/package because remove install path was requested in the same invocation"
        [[ $iDEBUG -eq 1 ]] && printf '%s\n%s\n' \
                                      "Main: Remove: iREMOVE_INSTALL_PATH: $iREMOVE_INSTALL_PATH" \
                                      "iREMOVE_SAVED_PACKAGES: $iREMOVE_SAVED_PACKAGES"
    fi

    # downlaod a package
    if [[ $iDOWNLOAD -eq 1 ]]; then
        # NOTE sDOWNLOAD_VERSION is set in getops
        sDOWNLOAD_VERSION=$(CleanUpVersion "$sDOWNLOAD_VERSION")
        DownloadGEPackage
    fi

    # check for new version and update if it is not installed
    if [[ $iUPDATE -eq 1 ]]; then
        if UpdateSavedGELatestRelease; then
            if GetLatestGEVersion; then # set sGE_LATEST_VERSION
                if IsInstalled "$sGE_LATEST_VERSION" && [[ $iFORCE -eq 1 ]]; then # Latest version is installed and -f is suppled
                    sREMOVE_VERSION=$sGE_LATEST_VERSION
                    if RemoveGEVersion; then
                        if InstallGEVersion; then # InstallGEVersion checks iUPDATE then sINSTALL_VERSION and/or sGE_LATEST_VERSION
                            echo "Update succeeded"
                        else
                            echo "Update failed"
                        fi
                    fi
                elif IsInstalled "$sGE_LATEST_VERSION" && [[ $iFORCE -eq 0 ]]; then # Latest version is installed and -f was not supplied
                    [[ $iDEBUG -eq 1 ]] && printf '%s' "Main: Update: "
                    echo "Latest version is installed"
                elif ! IsInstalled "$sGE_LATEST_VERSION"; then # Latest version is not installed
                    [[ $iDEBUG -eq 1 ]] && printf '%s' "Main: Update: "
                    echo "Latest version is not installed"
                    if InstallGEVersion; then
                        [[ $iDEBUG -eq 1 ]] && printf '%s' "Main: Update: "
                        echo "Update succeeded"
                        if IsSteamRunning; then echo "Please restart Steam to use the new version"; fi
                    else
                        [[ $iDEBUG -eq 1 ]] && printf '%s' "Main: Update: "
                        echo "Update failed"
                    fi
                fi
            else
                [[ $iDEBUG -eq 1 ]] && printf '%s\n' "Main: Update: GetLatestGEVersion returned failure status"
            fi
        else
            # GetLatestGEVersionInfo failed
            [[ $iDEBUG -eq 1 ]] && printf '%s\n' "Main: Update: GetLatestGEVersionInfo returned failure status"
            echo "Update failed"
        fi
        # WARNING like purchasing a tribble, this is probably a bad idea
        [[ $iINSTALL -eq 1 ]] && iUPDATE=0 # Reset iUPDATE to 0 so update and install can run in the same invocation
    fi

    # install a package
    if [[ $iINSTALL -eq 1 ]] && [[ $iUPDATE -eq 0 ]]; then
        # NOTE sINSTALL_VERSION is set in getops
        sINSTALL_VERSION=$(CleanUpVersion "$sINSTALL_VERSION")
        InstallGEVersion
    fi

    # list installed versions
    if [[ $iLIST_INSTALLED_GE_VERSIONS -eq 1 ]]; then
        ListInstalledGEVersions
    fi

    # report install path usage
    if [[ $iREPORT_USAGE -eq 1 ]] && [[ -n $sREPORT_VERSION ]]; then
        sREPORT_VERSION=$(CleanUpVersion "$sREPORT_VERSION")
        ReportGEDiskUsage
    elif [[ $iREPORT_USAGE -eq 1 ]] && [[ -z $sREPORT_VERSION ]]; then
        ReportGEDiskUsage
    fi

    # if no parameters were supplied, check for latest version and report if it is installed or not
    # TODO is there a better way?
    # NOTE ignore iFORCE and iDEBUG flags
    if [[ $iREMOVE_INSTALL_PATH -eq 0 ]] && \
        [[ $iREMOVE_SAVED_PACKAGES -eq 0 ]] && \
        [[ $iREMOVE -eq 0 ]] && \
        [[ $iLIST_INSTALLED_GE_VERSIONS -eq 0 ]] && \
        [[ $iREPORT_USAGE -eq 0 ]] && \
        [[ $iDOWNLOAD -eq 0 ]] && \
        [[ $iINSTALL -eq 0 ]] && \
        [[ $iUPDATE -eq 0 ]]; then

        [[ $iDEBUG -eq 1 ]] && {
            if IsSteamRunning; then
                echo "Main: Steam is running"
            else
                echo "Main: Steam is not running"
            fi
            echo "Main: Nothing to do - showing help"
        }


        ShowHelp
    fi
}

###############################################################################

trap '[[ $iDEBUG -eq 1 ]] && echo "Exit status (before CleanUp): $?"; iFINAL_CLEANUP=1 CleanUp; [[ $iDEBUG -eq 1 ]] && echo "Exit status (CleanUp): $?"; exit $iREAL_EXIT_STATUS' EXIT

###############################################################################

# Last warning
set +e
Main "$@"

